# -*- ruby -*-
$TESTING = $DEBUG = true # autotest debugging

gem 'ruby-debug'
require 'ruby-debug'

gem 'autotest-fsevent'

gem     'redgreen'
require 'redgreen/autotest'


require 'autotest/fsevent'

# require 'autotest/rcov'  LOOKING FOR RAKEFILE
require 'autotest/restart'
require 'autotest/timestamp'


if true

  gem     'autotest-growl'
  require 'autotest/growl'

  Autotest::Growl::show_modified_files = true
  Autotest::Growl::one_notification_per_run = false
  Autotest::Growl::clear_terminal = false
  Autotest::Growl::hide_label = false
end

# require 'autotest/rcov'
# Autotest::RCov.command = 'rcov_info'
# Autotest::RCov.pattern = o



module Hipe
  module AutotestInstanceMethods
    # we were gonna use this in hipe_add_mapping but just run it with --verbose
    # def hipe_growl title, message, icon_type=info
    #   unless /\A(?:error|failed|info|passed|pending)\Z/ =~ icon_type
    #     message << " (bad image type in your grown message: #{icon_type})"
    #     icon_type = 'info'
    #   end
    #   img = "../ampelmaennchen/#{icon_type}"
    #   Autotest::Growl.growl title, message, img
    # end

    # we were going to
    # warn you when in your .autotest file you add a mapping
    # for which there is no corresponding test files or source files
    # but just run with verbose
    def hipe_add_mapping *args, &block
      add_mapping(*args, &block)
    end
  end
end


Autotest.add_hook :initialize do |at|
  at.extend Hipe::AutotestInstanceMethods
  at.clear_mappings
  at.hipe_add_mapping(/^terminal-parsers\.rb/) do |fn, md|
    ['test/string.rb', 'test/regexp.rb']
  end
  at.hipe_add_mapping(/^nonterminal-parsers\.rb/) do |fn, md|
    [ 'test/concat-basic.rb',
      'test/union-basic.rb',
      'test/structured-basic.rb'
    ]
  end
  at.hipe_add_mapping(/^table.rb/) do |f,m|
    [ 'test/table.rb'
    ]
  end
  at.hipe_add_mapping(/^terminal-parsers.rb/) do |f,m|
    [ 'test/string.rb',
      'test/regexp.rb'
    ]
  end
  at.add_exception ".autotest"
  tests = %w(
    all concat-basic regexp string
    structured-basic table tokenizer
    union-basic
  )
  tests.each do |basename|
    name = "test/#{basename}.rb"
    re = Regexp.new('^'+Regexp.escape(name))
    at.hipe_add_mapping(re){ |f,m| [name] }
  end
  all = %w(
    parse-support general-support productions
    nonterminal-inspecty parsie
  )
  all.each do |basename|
    name = Regexp.new(Regexp.escape("#{basename}.rb"))
    at.hipe_add_mapping(name){|f,m| ['test/all.rb'] }
  end

  at.extra_class_map["ConcatBasicSpec"] = "test/concat-basic.rb"
  at.extra_class_map["StructuredBasicSpec"] = "test/structured-basic-spec.rb"
  at.extra_class_map["UnionBasicSpec"] = "test/union-basic-spec.rb"

  at.add_exception "test/helpers.rb"  #
end
